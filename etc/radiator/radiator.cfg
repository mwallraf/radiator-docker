#
# Configuration file for Radiator radius server
# This config file is used for testing the server (see test.pl)
# but it also demonstrates and documents most of the available 
# objects and keywords that are supported.
#
# DONT PANIC: Your own radius.cfg will be _much_ simpler than this.
#
# Hint: If you are building a new config file for your 
# installation, you 
# should probably consult some of the simple config files in the 
# goodies directory (such as goodies/simple.cfg)
# and only use this file as a guide to all the extra 
# things you can add later. Start simple and add features as you go.
# 
# Author: Mike McCauley (mikem@open.com.au)
# Copyright (C) 1997 Open System Consultants
# $Id: radius.cfg,v 1.81 2006/01/16 00:07:32 mikem Exp $
#
# Filenames configured here can use special formatting characters,
# some common examples below. There are many more.
# The full set is listed in the
# reference manual.
# %%        The percent character
# %D        DbDir
# %L        LogDir
# %y        Last 2 digits of the current year (2 digits)
# %Y        Current year (4 digits)
# %m        Current month number (2 digits)
# %d        Current day of the month (2 digits)
# %c        IP address of the client who sent the current packet (if any)
# %C        Client name of the client who sent the current packet (if any)
# %R        The realm of the username named in the current packet (if any)
# %N        The Nas-IP-Address in the current packet (if any)
# %n        The full User-Name in the current packet (if any)
# %P        The decrypted password
# %U        The username being authenticated (with the realm stripped off)
# %h        The hostname this server is running on
# %t        The current time in seconds since Jan 1 1970
# %T        The request type of the current packet (if any)
# %a        The Framed-IP-Address of the current packet
# %H        The current hour (0-23)
# %M        The current minute (0-59)
# %S        The current second (0-59)
# %A        The Timestamp in standard SQL date format eg: Sep 12, 2003 15:48
# %B        The current time in standard SQL date format eg: Sep 12, 2003 15:48
# %{attr}   The value of the named attribute in the current request packet
# %{GlobalVar:name} The value of the global varible "name", which
# 	    can be set on the command line with name=value, or
#	    in this file with:
#		 DefineFormattedGlobalVar name value
# %{Reply:attr} The value of the named attribute in the current reply packet
#		You can use this to get the value of reply attributes

# You can include files with "include filename" (no quotes, no leading hash)
# You can use special formatting characters in filename
# You can also include the output from an external program with
# something like 
#     include /usr/local/bin/script.sh|

# Any parameter's value can be loaded from an external file with
# the file:"filename" contruct. For example, you could have 
# PreClientHook file:"hook.pl"
# This will cause PreClientHook to be set to the entire text
# contained in the file hook.pl. This will work with any parameter
# but is probably most useful for hooks

# Foreground makes this run in the foreground instead of as a daemon
# When running as a daemon, detaches from STDIN and STDOUT, becomes
# a process group leader and detaches from the controlling TTY.
# You must use Foreground if you want to run from inetd, init or 
# restartWrapper, or as a service on NT
Foreground

# LogStdout makes all log file output appear on stdout as well 
# You must be running in Foreground mode for this to work
LogStdout

# Trace makes the server log increasing levels of detail aboutn 
# its internal operations. 
# At level 0 (the default), only serious errors are logged. 
# At level 1, warnings are also logged
# At level 2, normal but significant event are also logged, 
# At level 3, informational messages are also logged,
# At level 4, debugging messages are also logged.
# At level 5, hex packet dumps of all incoming packets are also printed.
# At level 4 and 5, packet dumps go to stdout. You probably dont
# want that in a live system. Choose the lowest Trace level you 
# really need
# Trace	4

# The name of the file where the radiusd PID will be 
# written after startup. Can contain special filename chars.
# Defaults to %L/radiusd.pid
PidFile	/tmp/radiusd.pid

# AuthPort specifies the port to list on for authentication requests
# Can be a numeric port number or a service name from /etc/services
# Defaults to 1645. You can specify multiple comma-separated ports
AuthPort	1645

# AcctPort specifies the port to list on for accounting requests
# Can be a numeric port number or a service name from /etc/services
# Defaults to 1646. You can specify multiple comma-separated ports
AcctPort
AcctPort	1646

# If you are multi-homed, and only want to listen on a single address
# you can restrict it by setting BindAddress. Set it to the address
# you want to listen on. Defaults to 0.0.0.0 (ie anything received by 
# any address on this host
# BindAddress 203.63.154.1
# You can specifiy multiple BindAddress addresses, comma separated:
# BindAddress 200.10.1.4, 200.11.2.3

# LogDir is the directory where logfiles are put
# Defaults to /var/log/radius
LogDir		/var/log/radiator

# DbDir is the directory where database and config are put
# Defaults to /usr/local/etc/raddb
DbDir		/etc/radiator

# LogFile is the name of the log file. 
# This file is always opened written and closed for each message, 
# so you can safely rotate it at any time.
# Can use special formatting characters
# Defaults to "%L/logfile"
#LogFile		%L/logfile
# You can disable all logging to the log file by 
# setting LogFile to nothing like this:
#LogFile		

# You can define your own variables that can be accessed anywhere
# special formatting charcters are permitted. In the following
# example, %{GlobalVar:myvariable} will be replaced with "value"
# You can get the same effect with myvariable=value on the
# command line for radiusd
#DefineFormattedGlobalVar myvariable value

# DictionaryFile is the name of the Radius dictionary file(s)
# Can use special formatting characters
# defaults to "%D/dictionary", which is good for 
# most everything except Ascends using the old Ascend non-vendor-specific attributes. If you
# need the old ascend attributes, name both dictionaries in the DictionaryFile
# Caution: changing the dictionary can stop the test suite test.pl
# from working
#DictionaryFile %D/dictionary,%D/dictionary.ascend

# You can adjust the length of the Radius socket queues with 
# SocketQueueLength. You should only need to do this if you are handling 
# large numbers of requests. You may also have to adjust your operating
# system configuration to permit large queue lengths. Not supported
# on Win95 or NT
#SocketQueueLength 1000000

# There are a number of other optional configuration items
# for optional NAS communications. See the reference manual.
# you only need these if you specify Simultaneous-Use and 
# a specific NasType in a <Client> statement
# FingerProg defaults to an internal client. If you specify
# a program name for FingerProg, it wil luse that program instead
# of the internal client.
#FingerProg 	/bin/finger
#SnmpgetProg 	/usr/bin/snmpget
#PmwhoProg	/usr/local/sbin/pmwho

#LivingstonMIB	.iso.org.dod.internet.private.enterprises.307
#LivingstonOffs	29
#LivingstonHole	2
SnmpgetProg 	/usr/local/bin/snmpget

# You can rewrite every username that is received with RewriteUsername
# (you can also rewrite on a per-client or per-realm basis in those clauses
# This is often good for translating MS domain names into @realm format
# RewriteUsername is
# a PERL substitution pattern. It is probably most useful for
# stripping the realm from a User-Name before authenticating it
# this can be done with RewriteUsername s/^([^@]+).*/$1/
# You could also do much more sophisticated 
# things like change the realm depending on the user name etc, 
# append things to the realm before forwarding etc.
# You can have any number of RewriteUsername lines. The rewrite
# are applied in the same order that they appear in this file.
#RewriteUsername	s/^mikem$/xyzzy/
#RewriteUsername	tr/[a-z]/[A-Z]/
# The next one converts realm\user format like for MSN
# to user@realm, the way Radiator likes them
#RewriteUsername	s/^(.*)\\(.*)/$2\@$1/

# PreClientHook is a perl function that will be called for each request
# before it is passed to a Client clause. A reference to the 
# the current packet is passed as the only argument
#PreClientHook	sub { print "Here I am in PreClientHook\n"; }

# MainLoopHook is called once per second during the main dispatch loop
#MainLoopHook sub { print "Here I am in MainLoopHook\n"; }

# StartupHook is a perl function that is called during initial
# startup and during restarts from SIGHUP. It is passed a single
# arguemnt that is true during a restart and undef during initial
# start
#StartupHook sub {print "here I am in StartupHook $_[0]\n";}

# ShutdownHook is a perl function that is called before exiting after 
# a SIGTERM.
#ShutdownHook sub {print "here I am in ShutdownHook\n";}

# You can also define hooks for USR1Hook, USR2Hook and WINCHHook
# which run (on UNix systems) when those signals are received.

# You can also force all user names to
# consist of a particular character set. This can be
# also useful to reject bogus access requests due to modem
# line noise. The value is a perl character set 
# specification. This example permits only alphanumeric,
# period, dash and the at sign.
# Note: you can apply UsernameCharset to a single realm or Handler
# with the Handler UsernameCharset parameter
#UsernameCharset a-zA-Z0-9\.-_@

# On Unix you can control the actual user that the server runs as
# provided it starts as a suitable priveleged user. You can specifiy
# unix user name or UID here
#User radius
# or group name/GID
#Group radius

# <Client hostname> is used to define each radius client to which 
# we will respond. Requests received from clients that arent named by
# Client clauses in this file here will be ignored
# The DEFAULT client (if defined) will handle requsts from Clients that
# are not defined elsewhere
<Client 1.2.3.4>
	Secret mysecret
</Client>

<Client DEFAULT>
	# Secret is the shared secret between client and this server
	# Any number of characters, any character except newline
	# You must set a secret in every Client clause.
	Secret	mysecret

	# If IgnoreAcctSignature is defined, incoming 
	# Accounting-Requests
	# from this client
	# will not have their signature checked. 
	# This is useful for some
	# Radius clients and forwarding servers
	# that dont correctly compute the signature 
	# in accounting requests.
	# The Accounting-Response packets will always have a correctly
	# computed signature, regardless of IgnoreAcctSignature
	# IgnoreAcctSignature

	# If more that 1 Radius request from this Client with 
	# the same Identifer are received within 
	# DupInterval seconds, the 
	# 2nd and subsequent are ignored. 
	# A value of 0 means duplicates are
	# always accepted, which might not be very wise, 
	# except during testing.
	# Default is 2 seconds
	# DupInterval 2
	DupInterval 0

	# You can use this to fine-tune which types of duplicate 
	# requests
	# you will handle (regardless of the setting of DupInterval)
	# The value is a space separated list of request types,
	# such as "Access-Request Accounting-Request" etc. Case
	# sensitive. This can sometimes help if you are losing packets
#	NoIgnoreDuplicates Access-Request

	# Use this to set a default realm for requests that dont 
	# already have one. This can trigger a specific Realm
	# statement for users who log in to this NAS without a
	# realm
#	DefaultRealm open.com.au

	# Optional NasType specifies the type of NAS. May
	# be used to determine how to communicate directly to the NAS
	# As part of simultaneous login checking. Dont define this
	# if you are not prepared for Radiator to spend some time
	# talking to your NAS occasionally.
	# Allowable values are
	#  Livingston             uses snmpget
	#  Portslave              uses finger
	#  PortslaveLinux         uses finger
	#  PortslaveMoxa	  uses finger, requires ctlportslave
	#                         in the target Linux host
	#  Cisco                  uses snmpget
	#  Ascend                 uses finger
	#  Shiva                  uses finger
	#  TotalControl           uses pmwho
	#  Computone              uses finger
        #  Bay                    uses snmpget
	#  Xyplex		  uses finger
	#  AscendSNMP		  uses snmpget
	#  TotalControlSNMP       uses snmpget
	#  Bay5399SNMP       	  uses snmpget
	#  Bay8000SNMP       	  uses snmpget
	#  Bay4000SNMP       	  uses snmpget
	#  BayFinger		  use finger
	#  Hiper       	  	  uses snmpget
	#  Tigris       	  uses snmpget
	#  TigrisNew       	  uses snmpget
	#  TigrisOld       	  uses snmpget
	#  NortelCVX1800          uses snmpget
	#  Portmaster3       	  uses snmpget
	#  Portmaster4       	  uses pmwho
	#  Ping			  uses ICMP ping to check the 
	#			  Framed-IP-Address of the dialup user
	#			  requires Radiator to be run as root
	# 
	# 
	# ignore                  Does not contact NAS, Always assumes
	#                         that there are no multiple logins
	#  other                  not implemented yet
	#  <undefined>            the default, does not contact NAS
	# NasType Livingston
	#NasType Ping

	# These base addresses are used to generate Framed-IP-Address
	# from Framed-Group reply items and NAS-Port
	# Framed-Group in a user record selects the nth 
	# FramedGroupBaseAddress (0 based), and NAS-Port is added to the last
	# byte (modulo 255) to generate a Framed-IP-Address.
	# Therefore if a user logs in on this Client to port 5, and their
	# Framed-Group is 1, they will get a Framed-IP-Address of 
	# 10.0.1.6.
	# You can use FramedGroupMaxPortsPerClassC to control the
	# number of ports alocated to each class C address
	# These parameters are ignored unless the user has a Framed-Group
	# reply item.
	FramedGroupBaseAddress	10.0.0.1
	FramedGroupBaseAddress	10.0.1.1
	FramedGroupBaseAddress	10.0.2.1
	FramedGroupMaxPortsPerClassC 20

	# You can rewrite all usernames that come from this client
#	RewriteUsername	s/yourdomain.com$/yourotherdomain.com/

	# You can specify a bunch of other clients that have 
	# an identical setup
#	IdenticalClients 10.1.1.1 10.1.1.2 10.1.1.3 nas.mydomain.com
#	IdenticalClients 10.1.1.7,10.1.1.8,10.1.1.9,203.63.154.1 localhost

	# PreHandlerHook is a perl function that will be called 
	# for each request after per-client username rewriting and
	# and duplicate rejection and
	# before it is passed to any Realm or Handler clause. 
	# A reference to the 
	# the current packet is passed as the only argument
#	PreHandlerHook	sub { print "Here I am in PreHandlerHook\n" }

	# If you set this, a Status-Server message from this client 
	# include details of all Clients, as well as basic
	# server information.
	StatusServerShowClientDetails
</Client>

# <Realm realm.name> defines how we will handle requests from users
# in that realm (ie who login with a username like user@realm.name).
# You can have one or more <Realm ...> clauses, one
# for each realm that you are prepared to authenticate.
# For each realm, we can specify a different method of handling
# authentication and accounting with an <AuthBy ...> clause.
# The realm name can also be a perl regexp (including 
# the opening and closing
# slashes. We look for an exact match on the realm first
# if there is no realm with an exact match we look for a regexp match,
# if still no match we look for the DEFAULT realm. If _still_ no match
# we will try to find a Handler that matches. If _still_ no match,
# log an error and ignore the request.
<Realm DEFAULT>
	# RewriteUsername allows you to alter the User-Name in
	# request before  further processing. This one
	# Strips the realm. You will want to do this if your database
	# contains usernames without realms
	RewriteUsername	s/^([^@]+).*/$1/
	# This one translates all uppercase chars to lowercase
	#RewriteUsername	tr/[A-Z]/[a-z]/

	# You can define your own function to do whatever you like 
	# to a user name. The user name wil be changed to the 
	# whatever is returned by this function
	#RewriteFunction sub { my($a) = shift; $a =~ s/[\000]//g; $a =~ s/^([^@]+).*/$1/; $a =~ tr/[A-Z]/[a-z]/; $a =~ s/'//g; $a; }

	# This one will strip out any characters except for 
	# alphanumeric, underscore and @. Useful if your NAS 
	# occasionally sends "noise" instead of a real user name
	# RewriteUsername tr/A-Za-z0-9_@//cd

	# You can also force all user names to
	# consist of a particular character set. This can be
	# also useful to reject bogus access requests due to modem
	# line noise. The value is a perl character set 
	# specification. This example permits only alphanumeric,
	# period, dash and the at sign.
	# Note: you can apply UsernameCharset to all realms with the
	# global UsernameCharset paramter
	#UsernameCharset a-zA-Z0-9\.-_@

	# MaxSessions specifies a maximium number of concurrent
	# sessions that are to be permitteed for 
	# each user in this realm.
	# The count is cached with the server and 
	# will be lost if the server 
	# exits or is restarted with HUP, so its not foolproof, 
	# but as long
	# as the server stays up for relatively long periods its OK.
	# This users the rewritten user name (see RewriteUsername) in 
	# determiniing of there are already sessions for the user
	# If not defined, there is no limit. If the limit is set to 0,
	# no logins are permitted for any user. Sessions start with an 
	# Accounting Start and end with an Accounting Stop.
	# If NasType is defined for the originating client,
	# Radiator may interrogate the NAS to confirm excessive
	# logins. Warning: this can slow Radiator down
	MaxSessions	2

	# The name of the file used to log accounting packets
	# in the standard radius accounting log format.
	# If not defined, accounting packets will not
	# be logged.
	# The default is no logging.
	# Can use special formatting characters.
	# This file is always opened written 
	# and closed for each event, 
	# so you can safely rotate it at any time.
	AcctLogFileName	%L/detail

	# If you are using AcctLogFileName, you can also set up your
	# own log file format with AcctLogFileFormat.
	# Can use special formatting characters (the %{attribute}
	# ones will be the most useful. A newline
	# will be added to the end. For example:
#	AcctLogFileFormat %{Timestamp} %{Acct-Session-Id} %{User-Name}

	# If this is defined, accounting details wil also be written
	# to this file in wtmp format.
	# The default is not defined
	WtmpFileName %L/wtmp

	# The optional name of a file to log password success and failure
	# messages to. This can be useful for your help desk to diagnose
	# user login problems. Default is not defined.
	# If not defined, no log file will be written.
	# Log is written one login attempt per line in the format
	# time:username:entered_password:correct_password:result
	PasswordLogFileName %L/password.log
	# You can get the same effect with <AuthLog FILE>, which
	# is much more configurable, see goodies/.authlog.cfg
	
	# For security reasons, you can exclude certain users from 
	# the PasswordLogFileName
	#ExcludeFromPasswordLog mikem fred

	# PreAuthHook is a perl function that will be called 
	# for each request after per-realm username rewriting and
	# before it is passed to any AuthBy clauses.
	# A reference to the 
	# the current packet is passed as the the first argument,
	# and a reference to the reply packet that is being constructed
	# is passed as the second argument
#	PreAuthHook	sub { print "Here I am in PreAuthHook\n" }

	# PostAuthHook is a perl function that will be called 
	# for each request after it has been
	# passed to any AuthBy clauses.
	# A reference to the 
	# the current packet is passed as the the first argument,
	# and a reference to the reply packet that is being constructed
	# is passed as the second argument
#	PostAuthHook	sub { print "Here I am in PostAuthHook\n" }

	# If access is rejected, this makes Radiator tell the user
	# exactly why in the Reply-Message
	RejectHasReason

	# You can force this handler to use a named session database
	# You must have a SessionDatabase with this Identifier
	# The default behaviour is to use the last SessionDatabase
	# in this file (or the default internal one)
	#SessionDatabase SDB1

	# AuthBy FILE authenticates from a flat file user
	# database. The file is cached by default, 
	# and is only read once
	# at startup or reinitialization. 
	# Note that you can also define AuthBy clauses at the top level, and refer to them 
	# (and reuse them within multiple Realms) with the AuthBy parameter

	# You can adjust each incoming request with StripFromRequest
	# and AddToRequest:
	#StripFromRequest Acct-Input-Octets, Acct-Output-Octets 
	#AddToRequest My-Start-Time=%b-%{Acct-Session-Time}

	<AuthBy FILE>
		# The default Filename is '%D/users'
		# Can use special formatting characters
#		Filename	./users

		# Nocache disable caching and forces Filename 
		# to be reread for every
		# Authentication. DONT use this unless you have to, 
		# because
		# it can be very slow for any more than 1000 users 
		# or so. If you
		# Need nocache, you should consider DBFILE instead
		#Nocache

		# You can make one or more reply items be eligible
		# for run-time replacement with DynamicReply.
		# You can have multiple DynamicReply lines, one for each 
		# unique attribute you want % interpolation on
		DynamicReply USR-IP-Input-Filter

		# You can do special character replacements
		# on check items prior to authentication with DynamicCheck
		# You can have multiple DynamicCheck lines, one for each 
		# check item you want % interpolation on
		DynamicCheck Group

		# You can force replies to honour Framed-IP-Address
		# hints in requests
		UseAddressHint

		# You can add reply items to every access accept
		# with AddToReply in any authentication method. 
		# See also StripFromReply. Value
		# is a list of comma separated attribute value
		# pairs, exactly as for any reply item.
		# StripFromReply removes from the request before
		# AddToReply adds to the request.
		# You can use any of the special % formats
		AddToReply Reply-Message=hello

		# AddToReplyIfNotExist will add attributes if and only
		# if they do not already exist in the reply
		AddToReplyIfNotExist Ascend-Data-Filter="ip in forward tcp est"

		# This one can force some reply attributes if and 
		# only if a user authenticates and they would otherwise
		# have no reply attributes. Useful
		# for simple authentication methods like UNIX or NT
		# The existence of AddToReply items will prevent
		# DefaultReply from adding more reply items
		DefaultReply Service-Type=Framed-User,Framed-Protocol=PPP

		# With AllowInReply, you can filter out all 
		# attribtues except those that occur in the list.
		# Useful for strictly limiting replies from proxy 
		# servers. This is the complement of StripFromReply
		#AllowInReply Service-Type,Framed-Protocol

		# If NoDefaultIfFound is set, Radiator will not consult the 
		# DEFAULT user
		# if a user entry is found, but the check items failed
		#NoDefaultIfFound

		# You can set up a Simultaneous-Use value that will
		# apply only if the user does not have their own
		# user-specific Simultaneous-Use check item
		# DefaultSimultaneousUse 2

		# You can force case insensitive password matching with
		# CaseInsensitivePasswords

		# This will cause rejection of any access request with
		# an empty password
		#RejectEmptyPassword

		# If RcryptKey is defined, then passwords in your 
		# database can be Rcrypt reversibly encrypted. 
		# Rcrypt passwords are in the form:
		# {rcrypt}nYXkJKLrxm/e3RfU0aT7w4al
		RcryptKey mysecret

		# If you are doing MS-CHAP authentication with 
		# plaintext passwords, and
		# your NAS requires MS-CHAP-MPPE-Keys in the reply,
		# then setting this parameter will force Radiator
		# to automatically reply with MS-CHAP-MPPE-Keys
		# set from the plaintext password
		AutoMPPEKeys

		# If you intend to do EAP authentcation (as used by 
		# some wireless systrems, you need to tell Radiattor
		# what types you are prepared to accept
		# Options are: MD5-Challenge, One-Time-Password
		# Generic-Token, TLS, TTLS, PEAP, MSCHAP-V2
		# Multiple types can be comma separated. With the default (most
		# preferred) type given first
		EAPType MD5-Challenge

	</AuthBy>

	# You can group multiple AuthBy methods with AuthBy GROUP
	<AuthBy GROUP>
		AuthByPolicy ContinueUntilAccept
		AddToReply Reply-Message=xxxx
		<AuthBy FILE>
			Filename users
		</AuthBy>
		<AuthBy FILE>
			Filename users
		</AuthBy>
	</AuthBy>

</Realm>

# Null realm, handles users with no realm
#<Realm>
#	<AuthBy FILE>
#		# The default Filename is '%D/users'
#		# Can use special formatting characters
#		Filename	./users
#	</AuthBy>
#</Realm>

<Realm file.nocache.realm>
	RewriteUsername	s/^([^@]+).*/$1/
	<AuthBy FILE>
		Filename	./users
		Nocache
	</AuthBy>
</Realm>

<Realm test.realm>
	# The TEST type always accepts Access-Requests and dumps the 
	# packet. Good for testing new realms, but dont leave them
	# lying around
	<AuthBy TEST>
		# Any keyword statements will be printed
		# to show they really get to the keyword() function
		# TestKeyword value
	</AuthBy>
</Realm>

<Realm dbfile.realm>
	RewriteUsername	s/^([^@]+).*/$1/

	# AuthBy DBFILE authenticates from a Merit radius
	# style DBM file. The database is opened and read
	# for each authentication, so updates to the database will take
	# effect without having to HUP this server.
	# The actual filenames used depend on which DBM modules are
	# available to you,
	# but will usually be something like filename.dir
	# and filename.pag
	<AuthBy DBFILE>
		# The default Filename is '%D/users'
		# Can use special formatting characters
		Filename	./usersdb

		# You can specify an alternate type of DBM file
		# by specifying DBType to the name of a type
		# of DBM file supported on your platform. If
		# you do this, you will also have to specify
		# the same type in the -t flag to builddbm
		#DBType ODBM_File
	
	</AuthBy>
</Realm>

<Realm unix.realm>
	RewriteUsername	s/^([^@]+).*/$1/

	# AuthBy UNIX authenticates from a unix style
	# password file. The password list is cached at startup
	# Cannot handle check items or reply items. If you
	# need them, see details about the Auth-Type check 
	# items in the manual
	<AuthBy UNIX>
		# This allows this authentication module to be 
		# accessed by symbolic name. This is useful
		# when the Auth-Type check item occurs in
		# a user database entry.
		Identifier System

		# The default Filename is /etc/passwd
		# Can use special formatting characters
		Filename	./passwd

		# Indicates how to extract the username and
		# password from each line. Match is a Perl regexp
		# that extracts returns the username and password
		# from each line. Only lines that match the regexp
		# will be used. The first field matched 
		# is the username,
		# and the second is the password.
		# The default Match works with
		# standard Unix password files, 2 or more 
		# colon separated
		# fields
#		Match ^([^:]*):([^:]*):?[^:]*:?([^:]*)

		# GroupFilename specifies the name of the file
		# that will be used to check Group check items
		# Defaults to /etc/group
		# Can use special formatting characters
		GroupFilename ./group

		# This one can force some reply attributes if and 
		# only if a user authenticates and they have no
		# reply attributes of their own. Useful
		# for simple authentication methods like UNIX or NT
		DefaultReply Service-Type=Framed-User,Framed-Protocol=PPP
	</AuthBy>
</Realm>

<Realm system.realm>
	RewriteUsername	s/^([^@]+).*/$1/

	# AuthBy SYSTEM authenticates using your system's 
	# getpwnam and getgrnam calls. This allows you to hide
	# whether its password files, NIS+, PAM or whatever
	# else might be installed on your system. Not supported on Win95
	# or NT, or on systems with shadow password files.
#	<AuthBy SYSTEM>
#		Identifier System1

		# On some systems (notably Solaris), AuthBy SYSTEM
		# needs  UseGetspnam to enable it to get the
		# encrypted password from /etc/shadow or NIS+
		# You also need the Shadows module from 
		# ftp://dagobert.eur.nl/pub/homebrew/Shadow-0.01.tar.gz
		# or better
#		UseGetspnam
#		UseGetspnamf
#	</AuthBy>
</Realm>

<Realm radius.realm>
#	RewriteUsername	s/^([^@]+).*/$1/

	# AuthBy RADIUS forwards all requests to a remote radius server
	# who is expected to reply to us. When we received a reply, we
	# will send it back to the original requester
	<AuthBy RADIUS>
		Identifier Radius

		# Host is the name of the hos(s)t where 
		# the remotes server(s) is running
		# You can name more than one Host. Radiator will
		# First try to forward to the first. If no reply
		# is heard after Retries, it will try the next one and
		# so on until a reply is received or the list
		# of hosts is exhausted
		Host		localhost
		Host		203.63.154.2

		# The shared secret to use for encrypting packets
		# Any number of characters, any character 
		# except newline
		Secret 		mysecret

		# AuthPort specifies the port on 
		# Host to send authentication 
		# requests. Can be a numeric port number or a service 
		# name from /etc/services
		# Defaults to 1645
		AuthPort	1647

		# AcctPort specifies the port on Host 
		# to send accounting 
		# requests. Can be a numeric port number or a service 
		# name from /etc/services
		# Defaults to 1646
		AcctPort	1648

		# Strip these attributes from the request before
		# forwarding to the remote Radius server. Value
		# is a list of comma separated attribute names
		# StripFromRequest removes from the request before
		# AddToRequest adds to the request.
#		StripFromRequest NAS-IP-Address,NAS-Port

		# Add these attributes to the request before
		# forwarding to the remote Radius server. Value
		# is a list of comma separated attribute value
		# pairs, exactly as for any reply item.
		# StripFromRequest removes from the request before
		# AddToRequest adds to the request.
		# You can use any of the special % formats
#		AddToRequest Calling-Station-Id="1234",Filter-Id=5,Login-IP-Host=%h,Timestamp=%t

		# Strip these attributes from the reply before
		# sending to the original client. Value
		# is a list of comma separated attribute names
		# StripFromReply removes from the request before
		# AddToReply adds to the request.
#		StripFromReply Framed-IP-Netmask,Framed-Compression

		# Add these attributes to the reply before
		# sending to the original client. Value
		# is a list of comma separated attribute value
		# pairs, exactly as for any reply item.
		# StripFromReply removes from the request before
		# AddToReply adds to the request.
		# You can use any of the special % formats
#		AddToReply Framed-Route="1.2.3.4",cisco-avpair="ip:addr_pool=mypool"

		# With AllowInReply, you can filter out all 
		# attribtues except those that occur in the list.
		# Useful for strictly limiting replies from proxy 
		# servers. This is the complement of StripFromReply
		#AllowInReply Service-Type,Framed-Protocol

		# Number of of times we will retransmit to each
		# Host before
		# giving up. Default is 3 (which means max of
		# 4 transmissions)
		Retries		3

		# Number of seconds to wait before retrying in secs.
		# Defaults to 5 secs
		RetryTimeout	5

		# You can prevent Auth request being forwared with this
		# Warning: it will cause all requests to be ACCEPTED
		# and is only useful when chaining with other AuthBy
		# clauses
		# NoForwardAuthentication

		# You can prevent Accounting requests being forwared 
		# with this
		# NoForwardAccounting

		# You can run a hook after the reply has been
		# received with ReplyHook. This is different to
		# PostAuthHook, which runs after the request has
		# been forwarded, but before the reply is received
		# from the remote server
		# If no reply is received, the hook wont run at all
		#ReplyHook	sub { print "Here I am in ReplyHook\n"; }

		# The synchronous flag tells us to wait for a reply
		# (or a timeout) before continuing to process any following 
		# AuthBy clauses (or any incoming requests). 
		# It can be useful if you wish to proxy requests
		# to multiple Radius servers in sequence
		# WARNING: If the remote server is down or at the end
		# of a slow link, this can seriously degrade
		# performance. You may use Fork to reduce the performance
		# cost, at the expense of increased memory usage
		# Use this flag with extreme caution!
		# Synchronous

		# Some Radius servers (GRIC on NT inparticular) 
		# exhibit broken behaviour
		# in that the reply does not come from the same UDP port
		# that the request was sent to! This broken behaviour
		# would cause Radiator to ignore replies
		# from broken ports. This flag will permit interoperation
		# with such broken servers. Beware: enabling this
		# for _two_ servers at the same IP address will cause
		# difficult to trace problems.
		#ServerHasBrokenPortNumbers

		# You can force an originating port number in order
		# to permit strict firewalling rules. This port
		# number will be used to send packets forwarded
		# by this AuthBy RADIUS
		#OutPort 10000

		# You can force passwords and replies to be cached
		# locally so that iof the remote fails, a cached
		# reply is used. CacheReplyHook runs when a cached
		# reply is about to be used. See the refernce manual
		# for more details.
		#CachePasswords
		#CachePasswordExpiry 3600
		#CacheReplyHook sub {print "in CacheReplyHook @_\n";}

	</AuthBy>
	# You can also fall through from RADIUS to another AuthBy
	# method such as SQL, which can be configured to
	# do accounting but not authentication. This allows you
	# to record all proxied accounting requests to your own
	# database
#	<AuthBy SQL>
#		# AuthSelect with empty string means dont do auth
#		AuthSelect
#		DBSource	dbi:mSQL:radius
#		DBUsername	
#		DBAuth		
#		AccountingTable	ACCOUNTING
#		UsernameColumn	USERNAME
#		TimestampColumn TIME_STAMP
#	</AuthBy>
</Realm>

# If you want to test AuthBy SQL, uncomment and configure this Realm
# You must have previously installed DBI and DBD for your database
#<Realm sql.realm>
#	RewriteUsername	s/^([^@]+).*/$1/

	# AuthBy SQL use an SQL database to authenticate 
	# and log accounting
	# Uses perl DBD/DBI to access the database
	# You can get extensive debugging output from 
	# DBD/DBI by turning
	# on the DBI_TRACE environment variable
#	<AuthBy SQL>
		# DBSource,  DBUsername and DBAuth are 
		# passed to DBI->connect
		# something like this:
		# DBI->connect(DBSource,  DBUsername and DBAuth).
		# DBSource should be a 'new-style' database 
		# specification
		# something like "dbi:drivername:..."
		# The exact meaning of these variables depends 
		# on the Perl DBD
		# driver you wish to use.See the
		# documentation for DBI and DBD for more information
		# on how to set them.
		# For Oracle use something like this
		# You can specify more than 1 set, and Radiator
		# will try to connect to the first one, and if
		# that fails, the second one etc.
		#DBSource dbi:Oracle:(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=oscar.open.com.au)(PORT=1521))(CONNECT_DATA=(SID=osc)))
#		DBSource	dbi:Oracle:host=localhost;sid=osc
#		DBUsername	system
#		DBAuth		manager
	
		# For Sybase, use something like this
#		DBSource	dbi:Sybase:romeo
#		DBUsername	sa
#		DBAuth		

		# For Sybase, use something like this
#		DBSource	dbi:Sybase:server=ZULU
#		DBUsername	sa
#		DBAuth		
	
		# For FreeTDS, use something like this
#		DBSource	dbi:FreeTDS:database=master;host=romeo;port=1433;
#		DBUsername	sa
#		DBAuth		
	
		# For FreeTDS, use something like this
#		DBSource	dbi:FreeTDS:database=radmin;host=romeo;port=1433;
#		DBUsername	radmin
#		DBAuth		radminpw
	
		# For mysql, use something like this
#		DBSource	dbi:mysql:radius
#		DBUsername	mikem
#		DBAuth		fred
	
		# For DBI::SQLite2, use something like this, where
		# dbfile is the file where the database will be stored
#		DBSource	dbi:SQLite2:dbname=/path/to/your/dbfile

		# For Informix, use something like this
#		DBSource	dbi:Informix:radius@stores
#		DBUsername	
#		DBAuth	

		# For interbase, use something like this
#		DBSource	dbi:InterBase:database=quebec:/tmp/radius.gdb
#		DBUsername	
#		DBAuth	
		# Alas, Interbase does not permit columns named PASSWORD
		# so the standard goodies/interbaseCreate.sql use
		# PASS_WORD as the column name. That means that
		# you will need a custom AuthSelect to work with
		# Interbase:
#		AuthSelect select PASS_WORD from SUBSCRIBERS where USERNAME=%0

		# For ODBC, use something like this
#		DBSource	dbi:ODBC:radius3
#		DBUsername	sa
#		DBAuth		sa
	
		# For ODBC from Solaris to NT, use something like this
#		DBSource	dbi:ODBC:radius_udbc
#		DBUsername	sa
#		DBAuth		sa
	
		# For PostgreSQL, use something like this
#		DBSource	dbi:Pg:dbname=radiator
#		DBUsername	mikem
#		DBAuth		fred

		# For proxy DBI, use something like this. MSSQL is the
		# DSN of the ODBC database on host fred. You must have
		# the DBI::Proxy server running on fred for this to 
		# work. See DBI-1.02 or better.
#		DBSource	dbi:Proxy:hostname=romeo;port=9991;dsn=dbi:ODBC:MSSQL
#		DBUsername	sa
#		DBAuth		sa

		# If the previous one fails, connect to this one
#		DBSource	dbi:mSQL:radius
#		DBUsername	
#		DBAuth		

		# For DBI::CSV, use something like this, which
		# will work with a comma separated file on Unix
		# The first line of the data file contains the column
		# names
#		DBSource dbi:CSV:f_dir=/your/data/dir;csv_eol=\012

		# AuthSelect defines an SQL select statement that will
		# return the password, check items and reply items for 
		# the user. You can use the special macros such as
		# %n and others to specify the username to select.
		# The first column returned is exptected to be 
		# the password
		# the second is the check items (if any) and the
		# third is the reply items if any. (You can change this
		# behaviour with AuthColumnDef
		# Defaults to select PASSWORD 
		#		from SUBSCRIBERS 
		#		where USERNAME='%n'
		# Which does not return any check or reply items
		# You can make arbitrarily complicated 
		# SQL statements so that 
		# you will only authenticate users whose 
		# account status is
		# OK or who have not exceeded their download limit etc.
		# If you define this to be an empty string,
		# no authentication will be done
#		AuthSelect select PASSWORD from SUBSCRIBERS where USERNAME=%0
		# If you want to use check and reply items from your
		# database too, you will need something like:
#		AuthSelect select PASSWORD, CHECKATTR, REPLYATTR  from SUBSCRIBERS where USERNAME=%0

		# EncryptedPassword should be set if 
		# AuthSelect will return
		# an encrypted password as the first 
		# selected column, rather 
		# a plaintext password
		# Defaults to undefined (ie not encrypted)
##		AuthSelect select ENCRYPTEDPASSWORD from SUBSCRIBERS where USERNAME='%n'
##		EncryptedPassword

		# AccountingTable is the name of the table 
		# that is used to 
		# store accounting information.
		# Defaults to 'ACCOUNTING'
		# If you define this to be an empty string,
		# no accounting info will be stored. You can use
		# special macros: table names based on the currnet year
		# and month might be very useful.
#		AccountingTable	ACCOUNTING

		# AcctColumnDef is used to define which attributes
		# in accounting requests are to be inserted
		# into AccountingTable, and it also specifies
		# which column they are to be inserted into
		# The general form is 
		#      AcctColumnDef COLUMN,Attribute[,type][,format]
		# You can have 0 or more of these. If there are none,
		# then the accounting table will not be updated.
		# If type is "integer", the insertion will be done
		# as an integer data type, otherwise as a string.
		# If type is integer-date, the integer will be converted
		# from Unix seconds to a SQL date
		# If type is "formatted-date", then the format will
		# be used as a format string for Date::Format
		# You must install the TimeDate package from CPAN for
		# this to work
		#
		# The attribute Timestamp is always available, 
		# and represents the time the packet was received, 
		# adjusted by Acct-Delay-Time.
		# One day Radiator will be able to deduce this from
		# the table schema.
		# The optional format arg is a sprintf-style format
		# string that will be used to format the value. %s
		# in the format will be replaced by the value of 
		# interest
#		AcctColumnDef	USERNAME,User-Name
#		AcctColumnDef	TIME_STAMP,Timestamp,integer
#		AcctColumnDef	ACCTSTATUSTYPE,Acct-Status-Type
#		AcctColumnDef	ACCTDELAYTIME,Acct-Delay-Time,integer
#		AcctColumnDef	ACCTINPUTOCTETS,Acct-Input-Octets,integer
#		AcctColumnDef	ACCTOUTPUTOCTETS,Acct-Output-Octets,integer
#		AcctColumnDef	ACCTSESSIONID,Acct-Session-Id
#		AcctColumnDef	ACCTSESSIONTIME,Acct-Session-Time,integer
#		AcctColumnDef	ACCTTERMINATECAUSE,Acct-Terminate-Cause
#		AcctColumnDef	NASIDENTIFIER,NAS-Identifier
#		AcctColumnDef	NASIDENTIFIER,NAS-IP-Address
#		AcctColumnDef	NASPORT,NAS-Port,integer
#		AcctColumnDef	FRAMEDIPADDRESS,Framed-IP-Address

		# Heres how you can convert Timestamps into a format
		# that Oracle likes
		#AcctColumnDef	TIME_STAMP,Timestamp,formatted-date,to_date('%e %m %Y %H:%M:%S', 'DD MM YYYY HH24:MI:SS')

		# As an alternative to AcctColumnDef, you can specify
		# any number of arbitrary SQL statements to execute
		# for every accounting request with AcctSQLStatement
		# You can use special formatting macros (the %{attribute}
		# ones are probably the most useful)
		# AcctSQLStatement DELETE from ONLINE where SessionID='%{Acct-Session-Id}'

		# This sets the limit on how long we are prepared to 
		# wait for the SQL server. Defaults to 60 secs
		#Timeout 10

		# This sets how long Radiator will back off from 
		# trying to talk to SQL after failing to connect
		# to any database server. Time is in seconds
		# Defaults to 10 minutes
		# FailureBackoffTime 30

#	</AuthBy>
#</Realm>

# You can find example configurations for Emerald, Platypus
# Interbiller, Freeside and Rodopi in the goodies directory

# LDAP, LDAP2 and LDAPSDK are all basically the same
# but they use different LDAP modules:
# LDAP uses Net::LDAPapi (which is now deprecated. Dont use
#	this for new installation102s)
# LDAP2 uses the newer Net::LDAP in perl-ldap-0.09 or better
# LDAPSDK uses the Netscape PerLDAP SDK(which is easily availble 
# 	for ActiveState Perl on NT)
#
# You must install the required perl module before you 
# can use this authentication method.
# If you want to test AuthBy LDAP, uncomment and configure this Realm
#<Realm ldap.realm>
#	RewriteUsername	s/^([^@]+).*/$1/
#	<AuthBy LDAP2>
		# The LDAP host to connect to
		# If not set, defaults to localhost
#		Host		localhost

		# If not set, defaults to 389. Use 636 for SSL.
		# Can be a numeric port number or a service name 
		# from /etc/services
		# Port		389
 
		# Specifies to use SSL to connect, and the name
		# of your certificate database. The database
                # must either be the cert5.db certificate database used 
		# by Netscape Navigator 3.x or the ServerCert.db 
		# certificate database used by
                # Netscape 2.x servers. 
		# You will usually want Port 636 if you enable SSL
		# You can use special filename characters
		# Only available with Netscape SDK version of LDAPapi
#		#UseSSL		./cert5.db 
 
		# These specify how to connect to the directory
		# as a privelged user
		#AuthDN		cn=Directory Manager
		#AuthPassword	fred

		# The base DN at which to start the search
#		BaseDN		o=Open System Consultants, c=AU

		# The LDAP attribute to match against User-Name
#		UsernameAttr	uid
 
		# The LDAP attribute that contains a plaintext password
		# or a password in the format {crypt}1xMKc0GIVUNbE
		# or {SHA}0DPiKuNIrrVmD8IUCuw1hQxNqZc=
#		PasswordAttr    userPassword

		# Optional attribute that contains an 
		# encrypted password to use instead of PasswordAttr
		# EncryptedPasswordAttr sn
 
		# Optional LDAP attribute that contains check 
		# items for the user in the form 
		# attr=value(,attr=value,...)
#		CheckAttr	cn
 
		# Optional LDAP attribute that contains reply 
		# items for the user in the form
		# attr=value(,attr=value,...)
#		ReplyAttr	mail

		# Instead of CheckAttr and ReplyAttr, you can have
		# check and reply items in individual LDAP attributes
#		AuthAttrDef	servicetype,Service-Type,check
#		AuthAttrDef	address,Framed-IP-Address,reply
 		
#	</AuthBy>
#</Realm>

# This realm demonstrates how to authenticate against an NT Domain Controller
# (running Radiator either on NT or Unix) with the users password as held
# by the domain controller
# You cant use this on Win95 systems: the underlying 
# system calls are not supported there.
# On Unix, requires the Authen::Smb package from CPAN to be installed first
#<Realm nt.realm>
#	RewriteUsername	s/^([^@]+).*/$1/
	# AuthBy NT will authenticate a users password against
	# the password held by NT for the user in the Domain
	# specified. It does not check any check items, and cannot
	# return any reply items, unless used in conjunction 
	# with Auth-Type. It is probably most useful	
	# in conjunction with the Auth-Type check item. 
	# See the Reference manual
	# Group check items are checked against the Local Groups
#	<AuthBy NT>
#		Identifier NTSystem

		# The NT domain to use for checking the password
		# Default is empty string
		# Empty string means the local host.
		# You MUST set this if Radiator is running on Unix
#		Domain  OSC

		# ON NT Optionally specify the name of the 
		# Primary Domain Controller, including the leading
		# \\ slashes, to override the default domain controller
		# for the domain you specified above
#		DomainController \\romeo

		# On Unix, you MUST specify the Domain Controller
		# name as the NT host name of the domain controller: 
		# its not optional. This needs to be set to the NT
		# name of the Primary Domain Controller, and further
		# the NT name must be in the Unix hosts or DNS
#		DomainController romeo
#		DomainController romeo.open.com.au

		# On NT, you can optionally check the 
		# "Grant dialin permission to user" flag in the 
		# user manager. Requires the 
		# Win32-RasAdmin Perl package to be installed first
		# HonourDialinPermission

		# This one can force some reply attributes if and 
		# only if a user authenticates and they have no
		# reply attributes of their own. Useful
		# for simple authentication methods like UNIX or NT
#		DefaultReply Service-Type=Framed-User,Framed-Protocol=PPP
#	</AuthBy>
#</Realm>

# This realm demonstrates how to authenticate from an external 
# program. The external program tells Radiator what sort of reply
# to send back by its exit code (or by the first line on stdout,
# if you have ResultInOutput set) You can also optionally provide
# reply items as attribute=value pairs on stdout
<Realm external.realm>
	RewriteUsername	s/^([^@]+).*/$1/

	<AuthBy EXTERNAL>
		# You may need to Fork if your external command
		# is slow, in order to prevent delaying Radiator
		#Fork

		# For NT, you might want something like this
#		Command c:/perl/bin/perl ./goodies/testcommand.pl

		# For Unix, maybe something like this
		Command perl ./goodies/testcommand.pl

		# This will cause the User-Password
		# to be decrypted before being passed to the
		# external program
		DecryptPassword

		# You might prefer use this to tell AuthBy EXTERNAL
		# to get the result from the first line of the
		# output. The permitted values are  the strings
		# ACCEPT, REJECT
		# IGNORE, CHALLENGE or REJECT_IMMEDIATE. ON Win98
		# its the only way to get it to work.
		#ResultInOutput
	</AuthBy>
</Realm>

# This realm will accept everything
<Realm internal.realm>
	<AuthBy INTERNAL>
		DefaultResult	accept
	</AuthBy>
</Realm>

# This tests 3GPP2 Mobile IP
# See goodies/mobileip.cfg
<Realm mobileip.realm>
	RewriteUsername	s/^([^@]+).*/$1/
	<AuthBy FILE>
		Filename	./users
	</AuthBy>
	<AuthBy MOBILEIP>
		DefaultHAAddress 192.10.10.2
	</AuthBy>
</Realm>

# This realm demonstrates how to authenticate against Tacacs+
# On Unix, requires the Authen::TacacsPlus package from CPAN to be 
# installed first
# It handles authentication only, and cant do check or reply items
# via Tacacs. If you have Authen::TacacsPlus version 0.15 or earlier
# it will only handle PAP. If you have a later version, it can handle
# PAP and CHAP 
#<Realm tacacsplus.realm>
#	RewriteUsername	s/^([^@]+).*/$1/
	# AuthBy TACACSPLUS will authenticate a users password against
	# a Tacacs+ server.
	# It does not check any check items, and cannot
	# return any reply items, unless used in conjunction 
	# with Auth-Type. It is probably most useful	
	# in conjunction with the Auth-Type check item. 
	# See the Reference manual
#	<AuthBy TACACSPLUS>
		# The name of the host running the Tacacs+ server
		# Defaults to 'localhost'
#		Host oscar.open.com.au

		# The encryption key yo use to talk to the
		# Tacacs+ server. You _MUST_ provide this. There is 
		# no default
#		Key mysecret

		# You can sepcify the port to use to connect
		# to the tacacsplus server explicitly with
		# CAn be a name from /etc/services or a port number
		# Defaults to tacacs (TCP port 49)
		# Port 49

		# optional timeout. Defaults to 15 seconds
		# Timeout 30
 
		# This one can force some reply attributes if and 
		# only if a user authenticates and they have no
		# reply attributes of their own. Useful
		# for simple authentication methods like this one
#		DefaultReply Service-Type=Framed-User,Framed-Protocol=PPP
#	</AuthBy>
#</Realm>

# This is how you can authenticate from NIS+
# You must install the Perl NISPlus module before you can use this
# Radiator will also need to run with root permission
#<Realm nisplus.realm>
#	RewriteUsername	s/^([^@]+).*/$1/
#	<AuthBy NISPLUS>
		# The NIS+ table to search. Defaults to passwd.org_dir
#		Table passwd.org_dir

		# The query string to use for finding a user
		# You can use the special formatting chars
		# defaults to [name=%n]
#		Query [name=%n]

		# The name of the field in Table that contains
		# the encrypted password for the user
		# Defaults to passwd
		# Ignored if you define any AuthFieldDef
#		EncryptedPasswordField passwd

		# You can define exactly how the fields in the NIS
		# table are to be used for check and reply items
		# If you do this, you must be sure t include one
		# for checking the encrypted password too.
		# Format is AuthFieldDef filename,attributename,type
		# - fieldname is the name of the field in the NIS table
		# - atributename is the name of the check or reply 
		# attribute to set. GENERIC means the field contains
		# a list of radius attribute=value pairs
		# - type is 'check' for check items or 'reply' for
		# reply items.
#		AuthFieldDef	passwd,Encrypted-Password,check
#		AuthFieldDef	gid,Reply-Message,reply
#	</AuthBy>
#</Realm>

# You can authenticate by any method supported by PAM on your
# host with AuthBy PAM.
# Requires that PAM be installed on your host, plus Authen-PAM-0.04
# or later (available from CPAN)
# Authorisation is not supported.
#<Realm pam.realm>
#	RewriteUsername	s/^([^@]+).*/$1/
#	<AuthBy PAM>	
		# The Service parameter tells AuthBy PAM which PAM 
		# service to use. Defaults to login
		# Service ppp

#	</AuthBy>
#</Realm>

# This is how you can configure a realm to user iPASS
# authentication and accounting
#<Realm ipass.realm>
#	RewriteUsername	s/^([^@]+).*/$1\@open.com.au/

	# Uses the IpassPerls module from OSC and the Net Roaming
	# libraries from iPASS to pass authentication and accounting
	# request to the iPASS network .
	# You must install and configure the iPASS Net Roaming
	# package and the Ipass perl module before you
	# can use AuthBy IPASS
	# The details of where the iPASS servers are etc are
	# configured into the iPASS configuration file, not here.
#	<AuthBy IPASS>
		# Debug causes the operation of the iPASS libraries
		# to be traced. The output is in 
		# /usr/ipass/logs/iprd.trace unless you change it
		# with Trace
#		Debug

		# Optional location of the iPASS configuration file
		# Defaults to /usr/ipass/ipass.conf. You can
		# use the special filename formats
		#Config	/usr/ipass/ipass.conf

		# Optional location of the iPASS trace file
		# Defaults to /usr/ipass/logs/iprd.trace. You can
		# use the special filename formats
		#Trace	/usr/ipass/logs/iprd.trace

		# Optional location of the iPASS installation
		# directory for locating SSL certificate and
                # key files.
		# Defaults to /usr/ipass. You can
		# use the special filename formats
		#Home	/usr/ipass

#	</AuthBy>
#</Realm>

# You can reuse and share AuthBy clauses by referring to an AuthBy 
# defined elsewhere by its identifier. This is especially useful 
# for SQL and other complicated clauses so you dont have to maintain 
# identical clause contents. AuthBy clauses can be defined for 
# reuse either at the top level or within any
# Realm, Handler or AuthBy GROUP, eg:
<AuthBy FILE>
	Identifier identifier1
</AuthBy>
<Realm xyz>
	# The argument must be the Identifier of an <AuthBy> clause
	AuthBy identifier1
</Realm>

# SessionDatabase allows you to specify the location and format
# of the SessionDatabase. The session database is used to determine
# who is currently online for Simultaneous-Use limit checking. It can
# also be used by external utilites for querying the online user population
# If you dont specify a SessionDatabase clause, the database will be kept 
# internal to radiusd, which is faster, but can't be used to synchronise
# multiple instances of Radiator. You can choose between DBM and SQL
#
# You _must_ specify an external database this way if you want to enforce
# Simultaneous-Use limits _and_ you are running multiple instances of
# Radiator. Otherwise, you can safely leave it undefined.
#<SessionDatabase DBM>
	# The name of the DBM file. Defaults on %D/online
#	Filename %D/online

	# You can specify an alternate type of DBM file
	# by specifying DBType to the name of a type
	# of DBM file supported on your platform. If
	# you do this, you will also have to specify
	# the same type at the top of your radwho.cgi
	#DBType ODBM_File

	# Optional identifier. Its a name you can use with
	# SessionDatabase in a Realm or Handler clause
#	Identifier SDB1
#</SessionDatabase>

#<SessionDatabase SQL>
	# Specify the SQL database to connect to is similar to AuthSQL 
	# You can specify multiple databases as fallbacks etc. See
	# the reference manual for more details
#	DBSource	dbi:mysql:radius
#	DBUsername	mikem
#	DBAuth		fred
	
	# You can alter the SQL statements used to add, delete and count
	# sessions with AddQuery, DeleteQuery, ClearNasQuery and
	# CountQuery. That means you can accomodate many different
	# SQL Session Database schemas. The defaults for these parameters
	# are suitable for the example RADONLINE table in the example SQL 
	# scripts in the goodies directory.
	# See the reference manual for more details
	#AddQuery insert into .....
	#DeleteQuery delete from .....
	#ClearNasQuery delete from ...
	#CountQuery select ........

	# Optional identifier. Igts just a name
#	Identifier SDB2

#</SessionDatabase>

# If you have an SNMPAgent clause, it establishes an Agent that
# will service SNMP requests for the standard Radius Server MIB as
# described in draft-ietf-radius-servmib-04.txt
# Only SNMP version 1 is supported
# Requires SNMP_Session-0.92.tar.gz or later from 
# ftp://ftp.switch.ch/software/sources/network/snmp/perl/
# Radiator must run as root to listen on the default SNMP port 161
# You can then use something like
# snmpget -c public -v 1 localhost .iso.org.dod.internet.3.79.1.1.1.1
# snmpget localhost public .iso.org.dod.internet.3.79.1.1.1.1
#  or
# snmpwalk -c public -v 1 localhost .iso.org.dod.internet.3.79.1.1.1
#
#<SNMPAgent>
	# Specifies the UDP port to listen on. Defaults to 161
	# You will need to run as root to open this port
	# on Unix
	# Port 161

	# Specifies a specific host address to listen on. Useful
	# if you are multi-homed. Defaults to the value of the global
	# BindAddress. Requires SNMP_Session-0.92 or greater
	#BindAddress 203.63.154.27

	# Specifies the community name that we will honour
	# for different types of access.
	# Defaults to nothing, meaning no access. Community
	# is deprecated in favour of ROCommunity and RWCommunity
	# For more specific control, see
	# ROCommunity, RWCommunity and Managers in the reference manual
#	ROCommunity public
#	RWCommunity public
#</SNMPAgent>

# You can set up additional logging with these. The logging wil be in 
# addition to any logging defined by LogFile and Trace above.

# Log to a file
#<Log FILE>
	# You can use special formatting characters
#	Filename %L/mylog
	# Trace level to use (allows same values as the global Trace level)
#	Trace 4
#</Log>

# Log to syslog (Unix only)
#<Log SYSLOG>
#	# Default facility is 'user'
#	Facility user
	
	# Trace level to use (allows same values as the global Trace level)
#	Trace 4
#</Log>

#<Log SQL
	# Defines how to connect to the database. See examples above
#	DBSource	dbi:mysql:radius
#	DBUsername	mikem
#	DBAuth		fred

	# Trace level to use (allows same values as the global Trace level)
#	Trace 4
#</Log>


